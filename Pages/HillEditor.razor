@page "/Hilleditor"
@using BlazorColorPicker
@inherits TexturesAndMaterials
@using PracaInżynierskaTomaszBaczek.Models
@using Microsoft.Extensions.Logging
@inject ILogger<HillEditor> Logger

<h3>HillEditor</h3>

<div id="editorform">
    @*<EditForm Model="@inputmodel">
            <label for="HillSize">Hill size:</label>
            <input type="number" id="HillSize" name="HillSize" @bind="@inputHillSize" @oninput="OnInputEvent"><br><br>
            <label for="hname">Hill name:</label>
            <input type="text" id="hname" name="hname"@bind="@inputmodel.HillName" @oninput="@((e) => { inputmodel.HillName = (string)e.Value; })"><br><br>
            <label for="lname">Country code:</label>
            <input type="text" id="lname" name="lname"><br><br>
            <input type="submit" value="Submit">
        </EditForm>*@
    <EditForm Model="@inputmodel">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="hillSize">Hill size:</label>
        <InputNumber id="hillsize" @bind-Value="inputmodel.HillSize" align="right" /><br />
        <label for="Texture">Texture:</label>
        <InputSelect id="Textures" class="form-group" @bind-Value="@Textures">
            @foreach (var item in Textures)
            {
                <option value="@item.Name">@item.Displayname</option>
            }
        </InputSelect>
        <input type="color" id="head" name="head" value="@InColor" @onchange="@UpdateIt">
        <label for="head">@InColor</label>
        <label for="hillname">Hill name:</label>
        <InputText id="hillname" @bind-Value="inputmodel.HillName" align="right" /><br />
        <label for="countrycode">Country code:</label>
        <InputText id="countrycode" @bind-Value="inputmodel.CountryCode" align="right" /><br />
        <button type="submit">Generate hill</button>

    </EditForm>
</div>

@code {
    private UserInputModel inputmodel = new();
    [Parameter]
    public string InColor { get; set; }
    [Parameter]
    public EventCallback<string> ReturnedColor { get; set; }

    private void UpdateIt(ChangeEventArgs e)
    {
        InColor = e.Value.ToString();
        ReturnedColor.InvokeAsync(InColor);
    }
    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
    }






}