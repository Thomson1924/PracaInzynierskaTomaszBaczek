
@page "/Post/{Value}"
@inject IBoardpostService BoardPostsService;
@inject ICommentService CommentService;
@inject NavigationManager NavManager;




@if (post == null)
{
    <div>
    </div>
}
else
{
    <h1 align="center">Thread</h1>
    <div class="row">
        <div class="col-1">
            <button class="btn btn-primary" @onclick="GoBack">Main Page</button>
        </div>
        <div class="col-10">
            <div class="card">
                <div class="card card-header align-content-md-stretch">
                    <div class="row">
                        <div class="col-3" align="center">
                            <div class="row">
                                <div class="col" align="left">
                                    @post.Author
                                </div>
                            </div>
                            <div class="row">
                                <div class="col" align="left">
                                    posted on
                                </div>
                            </div>
                        </div>
                        <div class="col-2" align="center">
                            @post.PubDate.ToString("dd.MM.yyyy")

                        </div>
                        <div class="col-5">
                            @post.Title
                        </div>
                    </div>
                </div>
            </div>
            <div class="card card-body align-content-md-stretch">
                <div class="row">
                    <div class="col-12">
                        @post.Body
                    </div>
                </div>
            </div>
            <div class="card card-footer align-content-md-stretch">

                    @if (post.Comments is not null)
                    {
                        <EditForm Model=newcomment OnValidSubmit="CreateComment" Context="Commentform">
                            <div class="row">
                                <div class="col-3">
                                    @authState.User.Identity.Name
                                </div>
                                <div class="col-2">
                                    @DateTime.Now
                                </div>
                                <div class="col-5">
                                    <InputText @bind-Value="newcomment.Body" class="align-self-lg-stretch"></InputText>
                                </div>
                                <div class="col-1">
                                    <button class="btn btn-success" type="submit">Add comment</button>
                                </div>
                            </div>
                        </EditForm>
                        <br />
                        @foreach (var comment in comments)
                        {
                            <div class="row">
                                <div class="col-3">
                                    @comment.Author posted on
                                </div>
                                <div class="col-2">
                                    @comment.PubDate.ToString("dd.MM.yyyy")
                                </div>

                                
                                @if (comment.Author == authState.User.Identity.Name)
                                {
                                    <div class="col-5">
                                    @comment.Body
                                    </div>
                                    <div class="col-1" align="right">
                                        <button class="btn btn-danger" @onclick="() => DeleteComment(comment.Id)">Delete</button>
                                </div>
                            }
                            else
                            {
                                <div class="col-6">
                                    @comment.Body
                                    </div>
                            }
                        </div>
                            <br />
                        }
                    }
                    else
                    {

                        <EditForm Model=newcomment OnValidSubmit="CreateComment" Context="Commentform">
                            <div class="row">
                                <div class="col-3">
                                    @authState.User.Identity.Name
                                </div>
                                <div class="col-2">
                                    @DateTime.Now.ToString("dd.MM.yyyy")
                                </div>
                                <div class="col-5">
                                    <InputText @bind-Value="newcomment.Body"></InputText>
                                </div>
                                <div class="col-1">
                                    <button class="btn btn-success" type="submit">Add comment</button>
                                </div>
                            </div>
                        </EditForm>
                        <br />

                    }
                </div>
                <hr />
        </div>
        <div class="col-1">
        </div>
    </div>
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    Models.Comment newcomment = new Models.Comment();
    private List<Models.Comment> comments = new();

    public class Comment
    {
        public string Author { get; set; } = "Author";
        public string Body { get; set; } = "Comment content";
        public DateTime PubDate { get; set; } = DateTime.Now;

    }
    private AuthenticationState authState;
    [Parameter]
    public string Value { get; set; }
    private BoardPost post { get; set; }


    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        post = await BoardPostsService.GetPost(Value);
        comments = await CommentService.ListAllComments(Value);
    }


    private void CreateComment()
    {
        var postId = post.Id;
        newcomment.Author = authState.User.Identity.Name;
        newcomment.PubDate = DateTime.Now;
        newcomment.Boardpost = post;
        CommentService.Create(newcomment, postId, post);
        NavManager.NavigateTo($"/Post/{Value}", true);

    }
    private void DeleteComment(int Id)
    {
        CommentService.Delete(Id);
        NavManager.NavigateTo($"/Post/{Value}", true);
    }
     private void GoBack()
    {
        NavManager.NavigateTo("/");
    }
}