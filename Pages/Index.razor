@page "/"
@using PracaInżynierskaTomaszBaczek.Models;
@using PracaInżynierskaTomaszBaczek.Interfaces;
@inject IBoardpostService BoardPostsService;
@inject NavigationManager NavManager;


<AuthorizeView>
    <NotAuthorized>
        <h1>Hill Creator</h1>
        Please log in
    </NotAuthorized>
    <Authorized>
        <h1>Hill Creator</h1>
        Hello, @authState.User.Identity.Name!
        <div class="row">
            <div class="col-md-5">
            </div>
            <div class="col-md-7">
                @if (boardPosts is null)
                {
                    <div>
                        It seems, that there are no posts. Please refresh.
                    </div>
                    <EditForm Model=@postmodel OnInvalidSubmit="@CreatePost" Context="Postform">
                        <div class="card">
                            <div class="card card-header align-content-md-stretch">
                                <div class="row">
                                    <div class="col-3">
                                        @authState.User.Identity.Name
                                    </div>
                                    <div class="col-6">
                                        <InputText @bind-Value="postmodel.Title"></InputText>
                                    </div>
                                </div>
                            </div>
                            <div class="card card-body align-content-md-stretch">
                                <InputText @bind-Value="postmodel.Body"></InputText>
                            </div>
                            <div class="card card-footer align-content-md-stretch">
                                <div class="col-2" >

                                </div>
                                <div class="col-8" align="right">
                                    <button class="btn btn-success" type="submit" @onclick="CreatePost">Add post</button>
                                </div>
                            </div>
                        </div>
                        <br>
                        <br>
                    </EditForm>
                }
                else
                {
                    <EditForm Model=@postmodel OnValidSubmit="@CreatePost" Context="Postform">
                        <div class="card">
                            <div class="card card-header align-content-md-stretch">
                                <div class="row">
                                    <div class="col-3">
                                        @authState.User.Identity.Name
                                    </div>
                                    <div class="col-6">
                                        <InputText @bind-Value="postmodel.Title"></InputText>
                                    </div>
                                </div>
                            </div>
                            <div class="card card-body align-content-md-stretch">
                                <InputText @bind-Value="postmodel.Body"></InputText>
                            </div>
                            <div class="card card-footer align-content-md-stretch">
                                <div class="col-2" >

                                </div>
                                <div class="col-8" align="right">
                                    <button class="btn btn-success" type="submit" @*@onclick="CreatePost"*@>Add post</button>
                                </div>
                            </div>
                        </div>
                        <br>
                        <br>
                    </EditForm>
                        @foreach(var post in boardPosts)
                        {
                        string postlink = $"/Post/{post.Id}";
                        <div class="card">
                            <div class="card card-header align-content-md-stretch">
                                <div class="row">
                                    <div class="col-3">
                                        @post.Author posted on
                                    </div>
                                    <div class="col-3">
                                        @post.PubDate.ToString("dd.MM.yyyy")

                                    </div>
                                    <div class="col-6">
                                        <NavLink class="nav-link" href=@postlink>
                                        @post.Title
                                        </NavLink>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card card-body align-content-md-stretch">
                            <div class="row">
                            @post.Body
                            </div>
                            @if(post.Author == authState.User.Identity.Name)
                            {
                            <div class="col-8" align="right">
                                    <button class="btn btn-danger" @onclick="() => DeletePost(post.Id)">Delete</button>
                            </div>
                            }
                        </div>
                        <br />
                    }
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    private AuthenticationState authState;
    private List<BoardPost> boardPosts;
    BoardPost postmodel = new BoardPost();
    public class Boardpost
    {
        public string Title { get; set; } = "Title";
        public string Body { get; set; } = "Comment content";
    }



    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        boardPosts = await ListAllPosts();
    }



    private void CreatePost()
    {
        postmodel.Author = authState.User.Identity.Name;
        postmodel.PubDate = DateTime.Now;
        BoardPostsService.Create(postmodel);
        NavManager.NavigateTo("/", true);

    }
    private void DeletePost(int Id)
    {
         BoardPostsService.Delete(Id);
         NavManager.NavigateTo("/", true);
    }
    private Task<List<BoardPost>> ListAllPosts()
    {
        return BoardPostsService.ListAll();
    }
}
