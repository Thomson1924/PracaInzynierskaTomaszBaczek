@page "/"
@using PracaInżynierskaTomaszBaczek.Models;
@using PracaInżynierskaTomaszBaczek.Interfaces;
@attribute [Authorize]
@inject IBoardpostService BoardPostsService;
@inject NavigationManager NavManager;


<AuthorizeView>
    <NotAuthorized>
        <h1>Hill Creator</h1>
        Please log in
    </NotAuthorized>
    <Authorized>
        <h1>Hill Creator</h1>
        Hello, @authState.User.Identity.Name!
        <div class="row">
            <div class="col-md-4">
            </div>
            <div class="col-md-7">
                @*@if (boardPosts.Count < 1)
                {*@
                    <EditForm Model=@postmodel OnInvalidSubmit="@CreatePost" Context="Commentform">
                    <div class="card">
                        <div class="card card-header align-content-md-stretch">
                            <div class="row">
                                <div class="col-3">
                                    @authState.User.Identity.Name
                                </div>
                                <div class="col-6">
                                    <InputText @bind-Value="postmodel.Title"></InputText>
                                </div>
                            </div>
                        </div>
                        <div class="card card-body align-content-md-stretch">
                            <InputText @bind-Value="postmodel.Body"></InputText>
                        </div>
                        <div class="card card-footer align-content-md-stretch">
                            <button class="btn-success" type="submit" @onclick="CreatePost">Add post</button>
                        </div>
                    </div>
                    </EditForm>
                @*}
                @foreach (var post in boardPosts)
                {*@
                    <div class="card">
                        <div class="card card-header align-content-md-stretch">
                            <div class="row">
                                <div class="col-3">
                                    @*@post.Author*@Author posted on
                                </div>
                                <div class="col-3">
                                    @*@post.PubDate*@ @DateTime.Now

                                </div>
                                <div class="col-6">
                                    @*@post.Title*@ Example Title
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card card-body align-content-md-stretch">
                        @*@post.Body*@ Example post body :LAKSDm;alkdm;alksdcm;alkjdsnblckajnelckqhwerblckvam a;lkjvcn ;lafnvlk jalkjdl kajnsdlk jads
                    </div>
                    <div class="card card-footer align-content-md-stretch">
                        <div class="row">

                            @*@foreach (var comment in post.Comments)
                            {*@
                                <div class="col-3">
                                    @*@comment.Author*@ Author posted on
                                </div>
                                <div class="col-3">
                                    @*@comment.PubDate*@ @DateTime.Now
                                </div>

                                <div class="col-6">
                                    @*@comment.Body*@ THIS is example body aklsdjcnlaksjdcnalksdjdcnlakjsdnclaksjdnclkajsndlckajsdlncakjsdnlckasjdncl
                                </div>
                            }
                        </div>
                        <hr />
                        }
                    </div>

                    <br />
                @*}*@
            </div>
        </div>

    </Authorized>
</AuthorizeView>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    private AuthenticationState authState;
    private List<BoardPost> boardPosts = ListAllPosts();
    BoardPost postmodel = new BoardPost();
    public class Boardpost
    {
        public string Title{ get; set; } = "Title";
        public string Body { get; set; } = "Comment content";
    }



    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        //var Comments = new List<Comment>();
        //Comments.Add(new Comment { Author = "Testing author", Body = "This post is so stupid", PubDate = DateTime.Today });
        //boardPosts.Add(new BoardPost { Title = "TEST1", Author = "Thomson19", Body = "This is testing post. Do not consider it as a serious post because it is inoly for testing.", Comments = Comments, PubDate = DateTime.Now });
        await ListAllPosts();
    }

    private void CreatePost()
    {
        postmodel.Author = authState.User.Identity.Name;
        postmodel.PubDate = DateTime.Now;
        BoardPostsService.Create(postmodel);
        NavManager.NavigateTo("/", true);

    }
    private void DeletePost(int Id)
    {
        BoardPostsService.Delete(Id);
    }
    private static Task<List<BoardPost>> ListAllPosts()
    {
        return BoardPostsService.ListAll();
    }
}
